{"version":3,"sources":["layout/Sidebar.js","layout/Navbar.js","layout/Footer.js","Blog/EditPost.js","Blog/NewPost.js","Blog/ViewPosts.js","layout/PageRoute.js","layout/Layout.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Sidebar","props","overSm","overMd","List","style","width","paddingTop","Typography","variant","display","align","background","padding","Divider","Grid","container","justifyContent","alignItems","direction","IconButton","color","marginInline","ListItem","Navbar","theme","useTheme","useMediaQuery","breakpoints","up","useReducer","drawer","drawerToggle","AppBar","position","Drawer","anchor","open","onClose","Toolbar","item","xs","md","lg","onClick","borderRadius","border","TextField","fullWidth","placeholder","Footer","BottomNavigation","BottomNavigationAction","label","value","icon","size","EditPost","NewPost","ViewPosts","PageRoute","exact","to","Homepage","App","Layout","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8c48710b.chunk.js","sourcesContent":["import {\n  Grid,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { HiUser } from \"react-icons/all\";\n\nconst Sidebar = (props) => {\n  const { overSm, overMd } = props;\n\n  return (\n    <List\n      style={{\n        width: `${overMd ? \"20vw\" : overSm ? \"30vw\" : \"80vw\"}`,\n        paddingTop: 0,\n      }}\n    >\n      {!overSm && (\n        <>\n          <Typography\n            variant=\"h6\"\n            // color=\"primary\"\n            display=\"block\"\n            align=\"center\"\n            style={{\n              background:\n                \"linear-gradient(to right, #33ccff 20%, #ff99cc 100%)\",\n              padding: 10,\n            }}\n          >\n            Blog\n          </Typography>\n          <Divider></Divider>\n        </>\n      )}\n      <Grid\n        container\n        justifyContent=\"flex-start\"\n        alignItems=\"center\"\n        direction=\"row\"\n        style={{\n          background: `${\n            overSm ? \"linear-gradient(to right, #ff9999 0%, #ffccff 100%)\" : \"\"\n          }`,\n        }}\n      >\n        <IconButton\n          color=\"secondary\"\n          style={{\n            marginInline: 20,\n            background: \"linear-gradient(to right, #ff9999 0%, #ffccff 100%)\",\n          }}\n        >\n          <HiUser></HiUser>\n        </IconButton>\n        <Typography variant=\"h6\">Aman Patel</Typography>\n      </Grid>\n      <Divider></Divider>\n      <ListItem>Other Menu</ListItem>\n    </List>\n  );\n};\n\nexport default Sidebar;\n","import React, { useReducer, useRef, useState } from \"react\";\nimport {\n  AppBar,\n  Drawer,\n  Grid,\n  IconButton,\n  TextField,\n  Toolbar,\n  Typography,\n  useMediaQuery,\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport { HiMenu, HiSearch, HiUser } from \"react-icons/all\";\nimport Sidebar from \"./Sidebar\";\n\nconst Navbar = () => {\n  const theme = useTheme();\n  const overSm = useMediaQuery(theme.breakpoints.up(\"sm\"));\n  const overMd = useMediaQuery(theme.breakpoints.up(\"md\"));\n  const [drawer, drawerToggle] = useReducer((drawer) => !drawer, false);\n  const appBarcol = \"linear-gradient(to right, #ffffff 0%, #336699 100%)\";\n\n  return (\n    <AppBar position=\"sticky\">\n      <Drawer anchor={\"left\"} open={drawer} onClose={drawerToggle}>\n        <Sidebar overSm={overSm} overMd={overMd}></Sidebar>\n      </Drawer>\n\n      <Toolbar\n        style={{\n          background: `${appBarcol}`,\n        }}\n      >\n        <Grid item xs={3} md={4} lg={4} align=\"flex-start\">\n          <IconButton onClick={drawerToggle}>\n            <HiMenu></HiMenu>\n          </IconButton>\n        </Grid>\n        {overSm && (\n          <Grid item xs={12} md={4} lg={4} align=\"center\">\n            <Typography variant=\"h5\">Blog</Typography>\n          </Grid>\n        )}\n        <Grid item xs={12} md={4} lg={4} align=\"center\">\n          <Grid\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            style={{ borderRadius: \"20px\", border: \"2px solid lightyellow\" }}\n          >\n            <Grid item xs={2}>\n              <HiSearch></HiSearch>\n            </Grid>\n            <Grid item xs={10}>\n              <TextField\n                // variant=\"filled\"\n                fullWidth\n                placeholder=\"Search ... \"\n              ></TextField>\n            </Grid>\n          </Grid>\n        </Grid>\n        {overSm && (\n          <Grid item xs={1} align=\"center\">\n            <IconButton\n              color=\"secondary\"\n              style={{\n                marginInline: 20,\n                background:\n                  \"linear-gradient(to right, #ff9999 0%, #ffccff 100%)\",\n              }}\n            >\n              <HiUser></HiUser>\n            </IconButton>\n          </Grid>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { AiFillAlert } from \"react-icons/all\";\n\nconst Footer = () => {\n  return (\n    <BottomNavigation>\n      <BottomNavigationAction\n        label=\"git\"\n        value=\"Recents\"\n        icon={<AiFillAlert size=\"40px\" />}\n        color=\"primary\"\n      ></BottomNavigationAction>\n    </BottomNavigation>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst EditPost = () => {\n  return <div>Edit existing Blog</div>;\n};\n\nexport default EditPost;\n","import React from \"react\";\n\nconst NewPost = () => {\n  return <div>Add New Blog</div>;\n};\n\nexport default NewPost;\n","import React from \"react\";\n\nconst ViewPosts = () => {\n  return <div>View Post</div>;\n};\n\nexport default ViewPosts;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport EditPost from \"../Blog/EditPost\";\nimport NewPost from \"../Blog/NewPost\";\nimport ViewPosts from \"../Blog/ViewPosts\";\n\nconst PageRoute = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact to=\"\">\n          <ViewPosts></ViewPosts>\n        </Route>\n        <Route to=\"newpost/\">\n          <NewPost></NewPost>\n        </Route>\n        <Route exact to=\"editpost/\">\n          <EditPost></EditPost>\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default PageRoute;\n","import React from \"react\";\n\nimport { colors, Grid, Typography } from \"@material-ui/core\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport PageRoute from \"./PageRoute\";\n\nconst Homepage = () => {\n  return (\n    <Grid container alignItems=\"stretch\" direction=\"column\">\n      <Grid container direction=\"row\" alignItems=\"center\">\n        <Navbar></Navbar>\n      </Grid>\n      <main>\n        <Grid container>\n          <PageRoute></PageRoute>\n        </Grid>\n      </main>\n      <footer>\n        <Grid\n          container\n          alignItems=\"center\"\n          direction=\"row\"\n          justifyContent=\"center\"\n        >\n          <Footer></Footer>\n        </Grid>\n      </footer>\n    </Grid>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Layout from \"./layout/Layout\";\n\nfunction App() {\n  return (\n    <div>\n      <Layout></Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}